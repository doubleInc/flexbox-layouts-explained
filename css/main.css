/*
    Standard web page(Holy Grail) layout which has multiple, equal height columns.
    by Ali A. (doubleInc@github)

    Note: Classes used so they can be easily interchanged in HTML file instead of
    directly targeting HTML elements.

    No reset or normalize used, all other styling is browser/agent asigned.

    Border colors used to display items better.

*/

.flex-container {
  /* 
  Step 1: The <div> element is our flex container, set display on it to 'flex'.

  This causes all DIRECT children to become flex items.  */
  display: flex;

  /* Set the direction of child elements to column. */
  flex-direction: column;

  /* Give the container a height value. I used 'vh', relative to 1% of the height 
  of the viewport in use. So in this example, 100vh takes up all the viewing screens height. 
  
  Note: In the vertical direction you need to specify a height for the container. This is 
  different from the horizontal direction, which automatically expands to fit.*/
  min-height: 100vh;
}

.flex-item {
  /* Step 2. Spacing direct children elements.

   In this example, <header> and <footer> are given the same space within the parent
   container. 
   
   Realisticly, we wouldnt assign these to the <header> and <footer>, leaving them blank
   and only assigning it to the <main> element because the content is often unkown.*/
  flex-grow: 1;
}

.flex-item-4 {
  /* Step 3. Grow middle colomn larger than the remaining ones. Give it more room, 
  this example sets the main column to 4. */
  flex-grow: 4;
}

.main-content {
  /* Step 4. Set contents of <main> to display as flex layout. */
  display: flex;
}

/* Step 5. The two classes left and right are to line up the aside on the left or right.

    Flex-basis is set to 200px and can be adjusted as the previous example.

    <aside> is given the class of 'right' and <article> with 'flex-item', allowing it 
    to fill the space since 'left' and 'right' are set to flex-grow 0.
*/
.left,
.right {
  /* The 200px is he initial main size of a flex item, flex-basis. It sets the size of the content 
  box unless otherwise set with box-sizing. */
  flex: 0 0 200px;
}

.left {
  /* Step 6. Set order so that 'left' aligns goes in first. Not used in this example, but needed 
  if all 3 columns are used. */
  order: -1;
}

/*  Step 7.
    Responsive mode which just stacks all elements.
*/

@media (max-width: 768px) {
  .flex-container {
    flex-direction: column;
    flex: 1;
  }
  .main-content {
    flex: 4;
    flex-direction: column;
  }
  .left,
  .right {
    flex: 0 0 200px;
  }
}

/*===================================================================
Non flexbox related styling. Only for better visibilty. 
=====================================================================*/

.border-purple {
  border: 1px solid purple;
}

.border-pink {
  border: 1px solid palevioletred;
}

.border-orange {
  border: 1px solid orangered;
}

.border-green {
  border: 1px solid green;
}

.border-blue {
  border: 1px solid aqua;
}
